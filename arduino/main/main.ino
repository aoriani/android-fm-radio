#include <SparkFun_Qwiic_OLED.h>
#include <res/qw_fnt_5x7.h>
#include <Adafruit_NeoPixel.h>
#include "SparkFunSi4703.h"
#include <Wire.h>

uint8_t droidLogo[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xC0, 0xC0,
  0xC0, 0xE0, 0xE0, 0xF0, 0xB0, 0xB0, 0x98, 0x98, 0x9C, 0x8C,
  0x8C, 0x86, 0x86, 0x87, 0x83, 0x80, 0x80, 0x80, 0x80, 0x80,
  0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF,
  0xFF, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83,
  0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0xF3,
  0xF3, 0xF3, 0x83, 0x83, 0x83, 0xFF, 0xFF, 0xFE, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x01, 0x01, 0x01, 0xF1, 0xF1,
  0xF9, 0xF9, 0xF1, 0xF1, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF,
  0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03,
  0x0F, 0xBC, 0xF0, 0xE0, 0xC0, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0,
  0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0xE0, 0xE0,
  0xC0, 0xC0, 0xE0, 0xF0, 0xBC, 0x0F, 0x1F, 0x3F, 0x7F, 0x70,
  0x70, 0x70, 0x71, 0x73, 0x73, 0x73, 0x73, 0x71, 0x70, 0x70,
  0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70,
  0x70, 0x70, 0x70, 0x7F, 0x3F, 0x1F, 0x00, 0x00, 0xC0, 0xE0,
  0xF0, 0xF8, 0xFC, 0xFE, 0x7F, 0x3F, 0x1F, 0x1F, 0x3F, 0x7F,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x1F, 0x1F, 0x3F, 0x7F,
  0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC,
  0xF8, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC,
  0xF8, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFC, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00
};



enum Status {
  BOOT,
  DISPLAY_ERROR,
  RADIO_ERROR,

  BOOT_COMPLETED
};

enum Color {
  NONE = 0x000000,
  PURPLE = 0xA020F0,
  ORANGE = 0xFFA500,
  RED = 0xFF0000,
  FADED_GREEN = 0x001100,
};


static void updateLedStatus();
static void setStatus(Status);
static inline void freeze();
static inline void setLedColor(Color);
static void drawLogo();
static void displayRadioStatus(int freq, int vol);
static inline void waitForSerial();

Adafruit_NeoPixel pixels(1, PIN_NEOPIXEL);
QwiicMicroOLED display;
Si4703_Breakout radio(A3, SDA, SCL);

Status status = BOOT;


void setup() {
  pixels.begin();

  //Preemptively set error status in case the radio init freezes
  setStatus(RADIO_ERROR);

  radio.powerOn();

  //TEMP Testing
  radio.setVolume(5);
  radio.setChannel(911); // I love jazz

  if (!display.begin()) {
    setStatus(DISPLAY_ERROR);
    freeze();
  }

  drawLogo();
  delay(1000);

  waitForSerial();

  displayRadioStatus(1911,5);
    
  setStatus(BOOT_COMPLETED);

}

void loop() {

}


void freeze() {
  do {} while (true);
}

void setStatus(Status stat) {
  status = stat;
  updateLedStatus();
}

void setLedColor(Color color) {
  auto red = (color >> 16) & 0xFF;
  auto green = (color >> 8) & 0xFF;
  auto blue = (color & 0xFF);
  pixels.setPixelColor(0, pixels.Color(red, green, blue));
  pixels.show();
}

void updateLedStatus() {
  switch (status) {
    case RADIO_ERROR:
      setLedColor(Color::ORANGE);
      break;

    case DISPLAY_ERROR:
      setLedColor(Color::PURPLE);
      break;

    case BOOT_COMPLETED:
      setLedColor(Color::FADED_GREEN);
      break;

    default:
      setLedColor(Color::NONE);
  }
}

void waitForSerial() {
  Serial.begin(57600);
  while (!Serial) {
    setLedColor(Color::RED);
    delay(500);
    setLedColor(Color::NONE);
    delay(500);
  }
}

void drawLogo() {
  display.bitmap(0, 0, droidLogo, 64, 48);
  display.display();
}

void displayRadioStatus(int freq, int vol) {
  char stationBuffer[25];
  sprintf(stationBuffer, "%02d.%01dMHz", freq / 10, freq % 10);
  String stationString(stationBuffer); //Sparkfun requires `String`. Not sure how much it is supported in Arduino
  int x0 = (display.getWidth() - QW_FONT_5X7.width * stationString.length()) / 2;
  int y0 = (display.getHeight() - QW_FONT_5X7.height) / 2;
  display.erase();
  display.text(x0, y0, stationString, 1);
  display.rectangleFill(0,display.getHeight()-4, (1+vol)*4, 4, 1);
  display.display();
}
